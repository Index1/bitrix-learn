<?    use Bitrix\Main,        Bitrix\Main\Context,        Bitrix\Main\Type\DateTime,        Bitrix\Main\Loader,        Bitrix\Iblock;    class CEuclihellJobsComponentList extends CBitrixComponent    {        protected $navParams = array();        protected $cacheAddon = array();        protected $filter;        protected function abortDataCache()        {            $this->AbortResultCache();        }        public function onPrepareComponentParams($params)        {            $result = [                'CACHE_TIME' => isset($params["CACHE_TIME"]) ? null : 36000000,                'IBLOCK_TYPE' => trim($params["IBLOCK_TYPE"]),                'IBLOCK_ID' => trim($params["IBLOCK_ID"]),                'PARENT_SECTION' => intval($params["PARENT_SECTION"]),                'INCLUDE_SUBSECTIONS' => $params['INCLUDE_SUBSECTIONS']!="N",                'SET_LAST_MODIFIED' => $params['SET_LAST_MODIFIED']==='Y',                'SORT_BY1' => strlen(trim($params["SORT_BY1"])) <= 0 ? 'ACTIVE_FROM' : null,                'SORT_ORDER1' => $this->pregMatch($params['SORT_ORDER1'], 'DESC'),                'SORT_BY2' => strlen(trim($params["SORT_BY2"])) <= 0 ? 'SORT' : null,                'SORT_ORDER2' => $this->pregMatch($params['SORT_ORDER2'], 'ASC'),                'FILTER_NAME' => $this->pregFilterName($params)            ];        }        public function pregMatch($param, $type)        {            if(!preg_match('/^(asc|desc|nulls)(,asc|,desc|,nulls){0,1}$/i', $param))                return $type;        }        public function pregFilterName($param)        {            if(strlen($param['FILTER_NAME'])<=0 || !preg_match("/^[A-Za-z_][A-Za-z01-9_]*$/", $param['FILTER_NAME']))            {                $this->filter = [];            }            else            {                $this->filter = $GLOBALS[$param['FILTER_NAME']];                if(!is_array($this->filter))                    $this->filter = [];            }            //TODO            $request = Context::getCurrent()->getRequest();            if($request->getQuery('argListOfJobs') == 'myListOfJobs' && ($GLOBALS['USER']->IsAdmin() || CSite::InGroup(5)))                $this->filter[] = array('IBLOCK_ID' => $param["IBLOCK_ID"], 'CREATED_BY' => $GLOBALS['USER']->GetID(), 'ACTIVE' => 'Y');        }        protected function checkModules()        {            if (!CModule::includeModule('iblock'))                throw new Main\LoaderException(Loc::getMessage('STANDARD_ELEMENTS_LIST_CLASS_IBLOCK_MODULE_NOT_INSTALLED'));        }        protected function checkParams()        {            if ($this->arParams['IBLOCK_ID'] <= 0 && strlen($this->arParams['IBLOCK_CODE']) <= 0)                throw new Main\ArgumentNullException('IBLOCK_ID');        }        protected function executeProlog()        {            if ($this->arParams['JOBS_COUNT'] > 0)            {                if($this->arParams["DISPLAY_TOP_PAGER"] || $this->arParams["DISPLAY_BOTTOM_PAGER"])                {                    CPageOption::SetOptionString("main", "nav_page_in_session", "N");                    $this->navParams = array(                        'nPageSize' => $this->arParams['JOBS_COUNT'],                        "bDescPageNumbering" => $this->arParams["PAGER_DESC_NUMBERING"],                        "bShowAll" => $this->arParams["PAGER_SHOW_ALL"],                    );                    $arNavigation = CDBResult::GetNavParams($this->navParams);                    $this->cacheAddon = array($arNavigation);                }                else {                    $this->navParams = array(                        "nTopCount" => $this->arParams["JOBS_COUNT"],                        "bDescPageNumbering" => $this->arParams["PAGER_DESC_NUMBERING"],                    );                }            }            else {                $this->navParams = false;            }        }        protected function readDataFromCache()        {            global $USER;            if ($this->arParams['CACHE_TYPE'] == 'N')                return false;            if (is_array($this->cacheAddon))                $this->cacheAddon[] = $USER->GetUserGroupArray();            else                $this->cacheAddon = array($USER->GetUserGroupArray());            return !($this->startResultCache(false, $this->cacheAddon, md5(serialize($this->arParams))));        }        public function executeComponent()        {            global $APPLICATION;            try {                $this->checkModules();                $this->checkParams();                $this->executeProlog();            } catch (Exception $e) {                $this->abortDataCache();                ShowError($e->getMessage());            }        }    }?>